import {Injectable} from '@nestjs/common';
import {PrismaService} from "../prisma/prisma.service";
import {AzureChatOpenAI} from "@langchain/openai";
import {okrSchema} from "./okr.schema";
import {JsonOutputParser} from "@langchain/core/output_parsers";

@Injectable()
export class PromptService {
    constructor(private readonly service: PrismaService) {
    }
    
    private async storeOkrs(validatedOkrs: any) {
        for (const okr of validatedOkrs) {
            const objective = await this.service.objective.create({
                data: {
                    title: okr.objective.title,
                },
            });
            
            const keyResults = okr.objective.keyResults.map((kr: any) => ({
                title: kr.title,
                initialValue: kr.initialValue,
                currentValue: kr.currentValue,
                targetValue: kr.targetValue,
                metric: kr.metric,
                objectiveId: objective.id
            }));
            
            await this.service.keyResult.createMany({
                data: keyResults,
            });
        }
    }
    
    async generateOkr(input: string) {
        const model = new AzureChatOpenAI({
            model: "gpt-4o"
        });
        
        const prompt = `
                        ### Generate a set of OKRs (Objectives and Key Results) at max 3 or 4 entities
                            based on the following input: ###
                            Input: "${input}"
                            The response should be in JSON format with the following structure:

                        [
                            {
                                "objective": {
                                    "title": "<objective-title>",
                                    "keyResults": [
                                        {
                                            "title": "<key-result-title>",
                                            "initialValue": <numeric-value>,
                                            "currentValue": <numeric-value>,
                                            "targetValue": <numeric-value>,
                                            "metric": "<unit-of-measure>"
                                        },
                                        {
                                            "id": <auto-generated-id>,
                                            "title": "<key-result-title>",
                                            "initialValue": <numeric-value>,
                                            "currentValue": <numeric-value>,
                                            "targetValue": <numeric-value>,
                                            "metric": "<unit-of-measure>"
                                        }
                                    ]
                                }
                            },
                        ]`;
        
        const response = await model.invoke(prompt);
        
        const parser = new JsonOutputParser();
        const parsed = await parser.parse(String(response.content));
        
        try {
            const validatedOkrs = okrSchema.parse(parsed);
            await this.storeOkrs(validatedOkrs);
            return "success";
        } catch (error) {
            return `invalid OKR format`;
        }
    }
}
